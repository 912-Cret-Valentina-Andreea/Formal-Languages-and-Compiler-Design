%{
#include <stdio.h>
#include <string.h>
%}

%option noyywrap

constant 	"[a-zA-Z0-9]*"|'[a-zA-Z0-9]'|[0-9]|[1-9][0-9]*|\+[0-9]|[1-9][0-9]]|-[0-9]|[1-9][0-9]|\+[1-9]|-[1-9]]
id		[a-zA-Z]+[a-zA-Z0-9]*

%%

start	{printf("Reserved word: %s\n", yytext);}
done	{printf("Reserved word: %s\n", yytext);}
char	{printf("Reserved word: %s\n", yytext);}
number	{printf("Reserved word: %s\n", yytext);}
if	{printf("Reserved word: %s\n", yytext);}
then	{printf("Reserved word: %s\n", yytext);}
else	{printf("Reserved word: %s\n", yytext);}
while	{printf("Reserved word: %s\n", yytext);}
for	{printf("Reserved word: %s\n", yytext);}
read	{printf("Reserved word: %s\n", yytext);}
write	{printf("Reserved word: %s\n", yytext);}

{constant} 	{printf("Constant: %s\n", yytext);}
{id}		{printf("Identifier: %s\n", yytext);}

":"	{printf("Separator: %s\n", yytext);}
";"	{printf("Separator: %s\n", yytext);}
"."	{printf("Separator: %s\n", yytext);}
","	{printf("Separator: %s\n", yytext);}
"{"	{printf("Separator: %s\n", yytext);}
"}"	{printf("Separator: %s\n", yytext);}
"("	{printf("Separator: %s\n", yytext);}
")"	{printf("Separator: %s\n", yytext);}
"["	{printf("Separator: %s\n", yytext);}
"]"	{printf("Separator: %s\n", yytext);}

"&&"	{printf("Operator: %s\n", yytext);}
"||"	{printf("Operator: %s\n", yytext);}
"+"	{printf("Operator: %s\n", yytext);}
"-"	{printf("Operator: %s\n", yytext);}
"*"	{printf("Operator: %s\n", yytext);}
"/"	{printf("Operator: %s\n", yytext);}
"<"	{printf("Operator: %s\n", yytext);}
"<="	{printf("Operator: %s\n", yytext);}
">"	{printf("Operator: %s\n", yytext);}
">="	{printf("Operator: %s\n", yytext);}
"!="	{printf("Operator: %s\n", yytext);}
"=="	{printf("Operator: %s\n", yytext);}
":="	{printf("Separator: %s\n", yytext);}
"!"	{printf("Operator: %s\n", yytext);}


%%

int main(int argc, char **argv){
	if(argc > 1)
		yyin = fopen(argv[1],"r");
	else
		yyin = stdin;
	yylex();
}	
