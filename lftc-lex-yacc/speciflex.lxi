%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"
%}

%option noyywrap
%option caseless

constant 	"[a-zA-Z0-9]*"|'[a-zA-Z0-9]'|[0-9]|[1-9][0-9]*|\+[0-9]|[1-9][0-9]]|-[0-9]|[1-9][0-9]|\+[1-9]|-[1-9]]
id		[a-zA-Z]+[a-zA-Z0-9]*

%%

start	{printf("Reserved word: %s\n", yytext); return START;}
done	{printf("Reserved word: %s\n", yytext); return DONE;}
char	{printf("Reserved word: %s\n", yytext); return CHAR;}
number	{printf("Reserved word: %s\n", yytext); return NUMBER;}
if	{printf("Reserved word: %s\n", yytext); return IF;}
then	{printf("Reserved word: %s\n", yytext); return THEN;}
else	{printf("Reserved word: %s\n", yytext); return ELSE;}
while	{printf("Reserved word: %s\n", yytext); return WHILE;}
for	{printf("Reserved word: %s\n", yytext); return FOR;}
read	{printf("Reserved word: %s\n", yytext); return READ;}
write	{printf("Reserved word: %s\n", yytext); return WRITE;}

{constant} 	{printf("Reserved word: %s\n", yytext); return CONST;}
{id}		{printf("Reserved word: %s\n", yytext); return ID;}

":"	{printf("Separator: %s\n", yytext); return COLON;}
";"	{printf("Separator: %s\n", yytext); return SEMI_COLON;}
"."	{printf("Separator: %s\n", yytext); return DOT;}
","	{printf("Separator: %s\n", yytext); return COMMA;}
"{"	{printf("Separator: %s\n", yytext); return CURLY_OPEN_BRACKET;}
"}"	{printf("Separator: %s\n", yytext); return CURLY_CLOSE_BRACKET;}
"("	{printf("Separator: %s\n", yytext); return ROUND_OPEN_BRACKET;}
")"	{printf("Separator: %s\n", yytext); return ROUND_CLOSE_BRACKET;}
"["	{printf("Separator: %s\n", yytext); return RIGHT_OPEN_BRACKET;}
"]"	{printf("Separator: %s\n", yytext); return RIGHT_CLOSE_BRACKET;}

"&&"	{printf("Operator: %s\n", yytext); return AND;}
"||"	{printf("Operator: %s\n", yytext); return OR;}
"+"	{printf("Operator: %s\n", yytext); return PLUS;}
"-"	{printf("Operator: %s\n", yytext); return MINUS;}
"*"	{printf("Operator: %s\n", yytext); return MUL;}
"/"	{printf("Operator: %s\n", yytext); return DIV;}
"<"	{printf("Operator: %s\n", yytext); return LT;}
"<="	{printf("Operator: %s\n", yytext); return LE;}
">"	{printf("Operator: %s\n", yytext); return GT;}
">="	{printf("Operator: %s\n", yytext); return GE;}
"!="	{printf("Operator: %s\n", yytext); return NE;}
"=="	{printf("Operator: %s\n", yytext); return EQ;}
":="	{printf("Separator: %s\n", yytext); return ATTRIB;}
"!"	{printf("Operator: %s\n", yytext); return NOT;}


%%

int main(int argc, char **argv){
	if(argc > 1)
		yyin = fopen(argv[1],"r");
	else
		yyin = stdin;
	yylex();
}	
